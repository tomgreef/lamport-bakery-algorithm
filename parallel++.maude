load parallel.maude

fmod MEMORY++ is
    including MEMORY .
    protecting QID * (sort Qid to BQid, op qid to bqid) .
  
    *** Sorts
    sorts IntVar BoolVar List{Int} List{Bool} .
    subsort Qid < IntVar .
    subsort BQid < BoolVar .
    subsort Int < List{Int} .
    subsort Bool < List{Bool} .

    *** Operaciones
    op nil : -> List{Int} [ctor] . 
    op __ : List{Int} List{Int} -> List{Int} [ctor assoc id: nil] . 
    
    op nil : -> List{Bool} [ctor] . 
    op __ : List{Bool} List{Bool} -> List{Bool} [ctor assoc id: nil] .

    op [_,_] : IntVar Int -> Memory .
    op [_,_] : BoolVar Bool -> Memory .         
    op [_,_] : IntVar List{Int} -> Memory .     
    op [_,_] : BoolVar List{Bool} -> Memory .    
    
    op _in_ : IntVar Memory -> Bool .
    op _in_ : BoolVar Memory -> Bool .          

    op get : Int List{Int} -> Int .             
    op get : Int List{Bool} -> Bool .           
    
    op put : List{Int} Int Int -> List{Int} .
    op put : List{Bool} Int Bool -> List{Bool} .    

    *** Variables
    vars IV : IntVar .             
    vars BV : BoolVar .           
    var M : Memory .           
    var I I' I'' : Int .            
    var B B' : Bool .             
    var LI : List{Int} .            
    var LB : List{Bool} .          
    
    *** Ecuaciones
    eq BV in [BV, B] M = true .   
    eq IV in [IV, LI] M = true .  
    eq BV in [BV, LB] M = true .    

    eq get(I, nil) = 0 .
    eq get(s I, I' LI) = get(I, LI) .
    eq get(0, I LI) = I .
    eq get(s I, B LB) = get(I, LB) .
    eq get(0, B LB) = B .

    eq put(nil, s I, I') = 0 put(nil, I, I') .
    eq put(nil, 0, I) = I .
    eq put(I LI, s I', I'') = I put(LI,I',I'') .
    eq put(I LI, 0, I') = I' LI .
    eq put(nil, s I, B) = false put(nil, I, B) .
    eq put(nil, 0, B) = B .
    eq put(B LB, s I, B') = B put(LB, I, B') .
    eq put(B LB, 0, B') = B' LB .
endfm

fmod EXPRESSION++ is
    including EXPRESSION .
    including MEMORY++ .

    *** Sorts
    sort BExpression IArray BArray . 
    subsorts BoolVar Bool < BExpression .
    subsorts IntVar Int < Expression .
    subsort IArray < Expression .
    subsort BArray < BExpression .

    *** Operaciones
    op _[_] : IntVar Expression -> IArray .
    op _[_] : BoolVar Expression -> BArray .
    op eval : Expression Memory -> Int .
    op eval : BExpression Memory -> Bool .

    *** Variables
    var IV : IntVar .
    vars I : Int .
    vars IE : Expression .
    vars IB : BExpression .
    var BV : BoolVar .
    var M : Memory .
    vars B B' : Bool .
    var LI : List{Int} .
    var LB : List{Bool} .

    *** Ecuaciones
        *** BOOL
    eq eval(B, M) = B .
    eq eval(BV, [BV, B] M) = B .
    ceq eval(BV, M) = false if BV in M =/= true .
    --- eq eval(BV, M) = false [owise] . ALTERNATIVA
        *** INT
    eq eval(I, M) = I .
    eq eval(IV, [IV, I] M) = I .
    ceq eval(IV, M) = 0 if IV in M =/= true .
    --- eq eval(IV, M) = 0 [owise] . ALTERNATIVA
        *** LIST BOOL
    eq eval(BV[IE], [BV, LB] M) = get(eval(IE, M), LB) .
    ceq eval(BV[IE], M) = false if BV in M =/= true .
        *** LIST INT
    eq eval(IV[IE], [IV, LI] M) = get(eval(IE, M), LI) .
    ceq eval(IV[IE], M) = 0 if IV in M =/= true .
endfm

fmod TEST++ is 
    extending TESTS .
    including EXPRESSION++ .
    including MEMORY++ .

    *** Operaciones
    op _=_  : Expression Expression -> Test .
    op _=_  : BExpression BExpression -> Test .
    op _>’_ : Expression Expression -> Test .
    op _!=_ : Expression Expression -> Test .
    op _!=_ : BExpression BExpression -> Test .
    op _||_ : Test Test -> Test [assoc] .
    
    *** Variables
    vars IE IE' : Expression .
    vars BE BE' : BExpression .
    vars T T' : Test .
    var M : Memory .

    *** Ecuaciones
    eq eval(BE = BE', M) = eval(BE, M) == eval(BE', M) .    
    eq eval(BE != BE', M) = eval(BE, M) =/= eval(BE', M) .

    eq eval(IE = IE', M) = eval(IE, M) == eval(IE', M) .
    eq eval(IE != IE', M) = eval(IE, M) =/= eval(IE', M) .
    eq eval(IE >’ IE', M) = eval(IE, M) > eval(IE', M) .

    eq eval(T || T', M) = eval(T, M) or eval(T', M) .
endfm

fmod SEQUENTIAL++ is
    extending SEQUENTIAL .
    including TESTS++ .
    including EXPRESSION++ .

    *** Operaciones
    op _:=_ : IntVar Expression -> Program .
    op _:=_ : BoolVar BExpression -> Program .
    op _:=_ : IArray Expression -> Program .
    op _:=_ : BArray BExpression -> Program .

    op if_then_else_fi : Test Program Program -> Program . 
    op repeat_until_li : Program Test -> Program .

    *** EXTRAS
    op skip : -> Program .
    op _;_ : Program Program -> Program [prec 61 assoc id: skip] .
    op _:=_ : BoolVar BExpression -> Program .
    op _:=_ : IntVar Expression -> Program .
    op if_then_fi : Test Program -> Program .
    op while_do_od : Test Program -> Program .
    op repeat_forever : Program -> Program .
endfm


mod PARALLEL++ is
    extending PARALLEL .
    including SEQUENTIAL++ .
    including TESTS++ .

    *** Variables
    var B : Bool .
    var N : Int .
    var IV : IntVar .
    var BV : BoolVar .
    var IE IE' : Expression .
    var BE BE' : BExpression .
    var LI : List{Int} .
    var LB : List{Bool} .
    vars P P' P'' : Program .
    var S : Soup .
    var I : Pid .
    var M : Memory .
    var T : Test .

    *** Reglas
    rl [BoolInsert] : {[I, (BV := BE) ; P] | S, [BV, B] M} => {[I, P] | S, [BV, eval(BE, [BV, B] M)] M} .
    crl [BoolCreate] : {[I, (BV := BE) ; P] | S, M} => {[I, P] | S, [BV, eval(BE, M)] M} if BV in M =/= true .

    rl [IntInsert] : {[I, (IV := IE) ; P] | S, [IV, N] M} => {[I, P] | S, [IV, eval(IE, [IV, N] M)] M} .
    crl [IntCreate] : {[I, (IV := IE) ; P] | S, M} => {[I, P] | S, [IV, eval(IE, M)] M} if IV in M =/= true .

    rl [BoolArrayInsert] : {[I, (BV[IE] := BE) ; P] | S, [BV, LB] M} => {[I, P] | S, [BV, put(LB, eval(IE,[BV, LB] M), eval(BE, [BV, LB] M))] M} .
    crl [BoolArrayCreate] : {[I, (BV[IE] := BE) ; P] | S, M} => {[I, P] | S, [BV, put(nil, eval(IE,M), eval(BE, M))] M} if BV in M =/= true .

    rl [IntArrayInsert] : {[I, (IV[IE] := IE') ; P] | S, [IV, LI] M} => {[I, P] | S, [IV, put(LI, eval(IE,[IV, LI] M), eval(IE',[IV, LI] M))] M} .
    crl [IntArrayCreate] : {[I, (IV[IE] := IE') ; P] | S, M} => {[I, P] | S, [IV, put(nil, eval(IE,M), eval(IE', M))] M} if IV in M =/= true .

    rl [if-else] :  {[I, if T then P' else P'' fi ; P] | S, M}
                    => 
                    {[I, if eval(T, M) then P' else P'' fi ; P] | S, M} .

    rl [repeat] :   {[I, repeat P' until T li ; P] | S, M} 
                    => 
                    {[I, if (not eval(T, M)) then (P' ; repeat P' until T li) else skip fi ; P] | S, M} .
endm