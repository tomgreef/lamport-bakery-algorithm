load bakery.maude 

mod BAKERY+ is 
    extending BAKERY . 
    including CONFIGURATION .

    *** Operaciones
    op noNext : Nat Configuration -> Bool .
    op waitingCountPlus : Configuration -> Nat .

    *** Variables
    vars N L T  : Nat .
    vars D P    : Oid .
    var C       : Configuration .
    var M       : Mode .

    *** Ecuaciones
    eq  noNext (N, none)                                    = true .
    eq  noNext (N, < D : Dispenser | next: N, last: L >)    = true . 
    ceq noNext (N, < P : BProcess | mode: M, number: T >)   = false if N == T .
    ceq noNext (N, < P : BProcess | mode: M, number: T >)   = true if N =/= T .
    ceq noNext (N, < P : BProcess | mode: M, number: T > C) = 
        noNext(N, < P : BProcess | mode: M, number: T >) 
        and noNext(N, C) if C =/= none . 

    *** Reglas
    rl [leave-bakery-unattended] : < P : BProcess | mode: wait, number: N >  =>  < P : BProcess | mode: sleep, number: 0 > . 

    crl [next] : [[ < D : Dispenser | next: N, last: L > < P : BProcess | mode: M, number: T > C ]]
      => [[ < D : Dispenser | next: s N, last: L > < P : BProcess | mode: M, number: T > C ]]
        if (noNext(N, < P : BProcess | mode: M, number: T > C) == true) .
endm  

mod ABSTRACT-BAKERY+ is 
    protecting BAKERY+ .
    including ABSTRACT-BAKERY .

    *** Variables
    vars D P : Oid .
    vars N L Z : Nat .
    var C  : Configuration .
    var M : Mode .
    
    *** Ecuaciones
    ceq  [[ < D : Dispenser | next: N, last: L > < P : BProcess | mode: wait, number: s s Z > C ]] =
        [[ < D : Dispenser | next: N, last: L > < P : BProcess | mode: wait, number: s Z > C ]] if not noNext(s Z, C)  .

    ceq  [[ < D : Dispenser | next: N, last: s s L > C ]] =
        [[ < D : Dispenser | next: N, last: s L >  C ]] if not noNext(s L, C) .    

    eq  [[ < D : Dispenser | next: s s N, last: L > C ]] =
         [[ < D : Dispenser | next: s N, last: L >  C ]] .    

endm

eof

[Q8]

[Q9] search [,10]  initial(5) =>* [[ < O:Oid : BProcess | mode: crit, number: N:Nat > < O2:Oid : BProcess | mode: crit, number: M:Nat > C:Ciguration ]] .

[Q10] 

[Q11] 
    search initial(5) =>! G:GBState .
    search initial(5) =>* [[ < O:Oid : BProcess | mode: crit, number: N:Nat > < O2:Oid : BProcess | mode: crit, number: M:Nat > C:Ciguration ]] .
