mod BAKERY is
    including CONFIGURATION .
    protecting NAT .

    *** Sorts
    sorts GBState Mode .
    subsort Nat < Oid .

    *** Operaciones
    op [[_]] : Configuration -> GBState .
    ops sleep wait crit : -> Mode [ctor] .
    op initial : Nat -> GBState .
    op auxInitial : Nat -> Configuration .

    *** Clases BProcess y Dispenser
    --- class BProcess | mode: Mode, number: Nat .
    sort BProcess .
    subsort BProcess < Cid .
    op BProcess : -> BProcess .
    op mode:_ : Mode -> Attribute [gather (&)] .
    op number:_ : Nat -> Attribute [gather (&)] .

    --- class Dispenser | next: Nat, last: Nat .
    sort Dispenser .
    subsort Dispenser < Cid .
    op Dispenser : -> Dispenser .
    op next:_ : Nat -> Attribute [gather (&)] .
    op last:_ : Nat -> Attribute [gather (&)] .

    *** Variables
    vars N L : Nat .
    vars D P : Oid .
    var C : Configuration .
    var Atts : Attribute .

    *** Ecuaciones
    eq initial (N) = [[< 0 : Dispenser | next: 1 , last: 1 > auxInitial(N) ]] .
    eq auxInitial (0) = < 0 : BProcess | mode: sleep, number: 0 > .
    eq auxInitial (s N) = < N : BProcess | mode: sleep, number: 0 > auxInitial(N) .

    *** Reglas
    rl [take-number] : 
    < D : Dispenser | last: L, Atts > < P : BProcess | mode: sleep, number: 0 > C
    => 
    < D : Dispenser | last: s L, Atts > < P : BProcess | mode: wait, number: L > C .

    rl [get-attended] : 
    < D : Dispenser | next: N, Atts > < P : BProcess | mode: wait, number: N > C 
    => 
    < D : Dispenser | next: N, Atts > < P : BProcess | mode: crit, number: N > C .

    rl [leave] : 
    < D : Dispenser | next: N, Atts > < P : BProcess | mode: crit, number: N > C
    => 
    < D : Dispenser | next: s N, Atts > < P : BProcess | mode: sleep, number: 0 > C  .
endm

mod ABSTRACT-BAKERY is
    protecting BAKERY .
    
    vars N L D P : Nat .
    var M : Mode .
    var C : Configuration .
    var Atts : Attribute .
    
    op decrement : Configuration -> Configuration .
    eq decrement (none) = none .
    ceq decrement (< P : BProcess | mode: M, number: s N > C) = < P : BProcess | mode: wait, number: N > decrement (C) if M =/= sleep .
    eq decrement (< P : BProcess | Atts > C) = < P : BProcess | Atts > decrement (C) [owise] .

    eq [[ < D : Dispenser | next: s s N, last: s L > C ]] = [[ < D : Dispenser | next: s N, last: L > decrement (C) ]] .
endm

load model-checker.maude

mod ABSTRACT-BAKERY-PREDS is
    protecting ABSTRACT-BAKERY .
    including SATISFACTION .
    including QID . 

    subsort GBState < State .

    *** Operaciones
    op processIn : Nat Mode -> Prop . 
    op notInMutex : -> Prop .

    *** Variables
    var M : Mode .
    vars P P' : Nat .
    vars N N' : Nat .
    var C : Configuration . 
        
    *** Ecuaciones
    eq [[ < P : BProcess | mode: M, number: N > C ]] |= processIn(P, M) = true . 
    eq [[ < P : BProcess | mode: crit, number: N >
          < P' : BProcess | mode: crit, number: N' > C ]] |= notInMutex = true .

endm 

mod BAKERY-CHECK is
    protecting ABSTRACT-BAKERY-PREDS .
    including MODEL-CHECKER .
    including LTL-SIMPLIFIER .
endm

eof

[Q1] rew initial(5) .

[Q2] search [,1000]  initial(5) =>* [[ < O:Oid : BProcess | mode: crit, number: N:Nat > < O2:Oid : BProcess | mode: crit, number: M:Nat > C:Configuration ]] .

[Q3] search [,1000] initial(5) =>! G:GBState .

[Q4]

[Q5] search initial(5) =>* G:GBState .

[Q6] red modelCheck(initial(5), [] ~ (processIn(N:Nat, crit) /\ processIn(M:Nat, crit))) . *** is bad

[Q7] red modelCheck(initial(5), [] (processIn(1, wait) -> <> processIn(1, crit)
/\ (processIn(1, crit) -> <> processIn(1, sleep))
/\ (processIn(1, sleep) -> <> processIn(1, wait))
/\ processIn(2, wait) -> <> processIn(2, crit)
/\ (processIn(2, crit) -> <> processIn(2, sleep))
/\ (processIn(2, sleep) -> <> processIn(2, wait)) 
/\ processIn(3, wait) -> <> processIn(3, crit)
/\ (processIn(3, crit) -> <> processIn(3, sleep))
/\ (processIn(3, sleep) -> <> processIn(3, wait)) 
/\ processIn(4, wait) -> <> processIn(4, crit)
/\ (processIn(4, crit) -> <> processIn(4, sleep))
/\ (processIn(4, sleep) -> <> processIn(4, wait)) 
/\ processIn(5, wait) -> <> processIn(5, crit)
/\ (processIn(5, crit) -> <> processIn(5, sleep))
/\ (processIn(5, sleep) -> <> processIn(5, wait)) 
)) .